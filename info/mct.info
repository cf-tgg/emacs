This is doc6ndv9v.info, produced by makeinfo version 6.8 from mct.texi.

Copyright (C) 2021 Free Software Foundation, Inc.

     Permission is granted to copy, distribute and/or modify this
     document under the terms of the GNU Free Documentation License,
     Version 1.3 or any later version published by the Free Software
     Foundation; with no Invariant Sections, with the Front-Cover Texts
     being “A GNU Manual,” and with the Back-Cover Texts as in (a)
     below.  A copy of the license is included in the section entitled
     “GNU Free Documentation License.”

     (a) The FSF’s Back-Cover Text is: “You have the freedom to copy and
     modify this GNU manual.”

INFO-DIR-SECTION Emacs misc features
START-INFO-DIR-ENTRY
* MCT: (mct).           Enhancement of the default minibuffer completion.
END-INFO-DIR-ENTRY


File: doc6ndv9v.info,  Node: Top,  Next: Overview of MCT,  Up: (dir)

Minibuffer Confines Transcended (mct.el)
****************************************

Copyright (C) 2021 Free Software Foundation, Inc.

     Permission is granted to copy, distribute and/or modify this
     document under the terms of the GNU Free Documentation License,
     Version 1.3 or any later version published by the Free Software
     Foundation; with no Invariant Sections, with the Front-Cover Texts
     being “A GNU Manual,” and with the Back-Cover Texts as in (a)
     below.  A copy of the license is included in the section entitled
     “GNU Free Documentation License.”

     (a) The FSF’s Back-Cover Text is: “You have the freedom to copy and
     modify this GNU manual.”

   This manual, written by Protesilaos Stavrou, describes the
customization options for ‘mct’ (or ‘mct.el’ and variants), and provides
every other piece of information pertinent to it.

   The documentation furnished herein corresponds to stable version
1.0.0, released on 2023-09-24.  Any reference to a newer feature which
does not yet form part of the latest tagged commit, is explicitly marked
as such.

   Current development target is 1.1.0-dev.

   • Package name (GNU ELPA): ‘mct’
   • Official manual: <https://protesilaos.com/emacs/mct>
   • Change log: <https://protesilaos.com/emacs/mct-changelog>
   • Git repo on SourceHut: <https://git.sr.ht/~protesilaos/mct>
        • Mirrors:
             • GitHub: <https://github.com/protesilaos/mct>
             • GitLab: <https://gitlab.com/protesilaos/mct>
   • Mailing list: <https://lists.sr.ht/~protesilaos/general-issues>
   • Backronym: Minibuffer Confines Transcended; Minibuffer and
     Completions in Tandem.

   If you are viewing the README.org version of this file, please note
that the GNU ELPA machinery automatically generates an Info manual out
of it.

* Menu:

* Overview of MCT::
* Customizations::
* Usage::
* Installation::
* Sample setup::
* Keymaps::
* User-level tweaks or custom code::
* Third-party extensions::
* Alternatives::
* Acknowledgements::
* Official sources::
* GNU Free Documentation License::
* Indices::

— The Detailed Node Listing —

Customizations

* Live completion::
* Minimum input threshold::
* Delay between live updates::
* Live updates per command or completion category::
* Size boundaries of the Completions::
* Dynamic completion tables in mct-mode::
* Hide the Completions mode line::
* Remove shadowed file paths::
* MCT in the minibuffer and completion in regular buffers::

Live updates per command or completion category

* Passlist for commands or completion categories::
* Blocklist for commands or completion categories::
* Known completion categories::
* Find completion category::

Usage

* Cyclic behaviour for mct-mode::
* Selecting candidates with mct-mode::

Installation

* Install the package::
* Manual installation method::

User-level tweaks or custom code

* Sort completion candidates on Emacs 29::
* Indicator for completing-read-multiple::
* Ido-style navigation through directories::

Third-party extensions

* Enable Consult previews::

Indices

* Function index::
* Variable index::
* Concept index::



File: doc6ndv9v.info,  Node: Overview of MCT,  Next: Customizations,  Prev: Top,  Up: Top

1 Overview of MCT
*****************

Minibuffer and Completions in Tandem, also known as “MCT”, “Mct”, ‘mct’,
or ‘mct.el’, is a package that enhances the default minibuffer and
‘*Completions*’ buffer of Emacs 28 (or higher) so that they work
together as part of a unified framework.  The idea is to make the
presentation and overall functionality be consistent with other popular,
vertically aligned completion UIs while leveraging built-in
functionality.

   The main feature set that unifies the minibuffer and the
‘*Completions*’ buffer consists of commands that cycle between the two,
making it seem like they are part of a contiguous space (*note Basic
usage: Usage.).

   MCT tries to find a middle ground between the frugal defaults and the
more opinionated completion UIs.  This is most evident in its approach
on how to present completion candidates.  Instead of showing them
outright or only displaying them on demand, MCT implements a minimum
input threshold as well as a slight delay before it pops up the
‘*Completions*’ buffer and starts updating it to respond to user input.


File: doc6ndv9v.info,  Node: Customizations,  Next: Usage,  Prev: Overview of MCT,  Up: Top

2 Customizations
****************

MCT is highly configurable to adapt to the varying needs of users.  This
section documents each user option.

* Menu:

* Live completion::
* Minimum input threshold::
* Delay between live updates::
* Live updates per command or completion category::
* Size boundaries of the Completions::
* Dynamic completion tables in mct-mode::
* Hide the Completions mode line::
* Remove shadowed file paths::
* MCT in the minibuffer and completion in regular buffers::


File: doc6ndv9v.info,  Node: Live completion,  Next: Minimum input threshold,  Up: Customizations

2.1 Live completion
===================

Brief: Control auto-display and live-update of the ‘*Completions*’
buffer.

   Symbol: ‘mct-live-completion’ (‘choice’ type)

   Possible values:

  1. ‘nil’
  2. ‘t’ (default)
  3. ‘visible’

   This user option governs the overall behaviour of MCT with regard to
how it uses the Completions’ buffer:

   • When nil, the user has to manually request completions, using the
     regular activating commands (*note Usage::).  The Completions’
     buffer is never updated live to match user input.  Updating has to
     be handled manually.  This is like the out-of-the-box minibuffer
     completion experience.

   • When set to ‘visible’, the Completions’ buffer is live updated only
     if it is visible (present in a window).  The actual display of the
     completions is still handled manually.  For this reason, the
     ‘visible’ style does not read the ‘mct-minimum-input’, meaning that
     it will always try to live update the visible completions,
     regardless of input length (*note Minimum input threshold::).

   • When non-nil (the default), the Completions’ buffer is
     automatically displayed once the ‘mct-minimum-input’ is met and is
     hidden if the input drops below that threshold.  While visible, the
     buffer is updated live to match the user’s input.

   Note that every command or completion category that is declared in
the ‘mct-completion-passlist’ ignores this option altogether.  This
means that every such symbol will always show the Completions’ buffer
automatically and will always update its contents live to match any
further user input (*note Passlist for commands or completion
categories::).  Same principle for the ‘mct-completion-blocklist’, which
will always disable both the automatic display and live updating of the
Completions’ buffer (*note Blocklist for commands or completion
categories::).

   *note Size boundaries of the Completions::.


File: doc6ndv9v.info,  Node: Minimum input threshold,  Next: Delay between live updates,  Prev: Live completion,  Up: Customizations

2.2 Minimum input threshold
===========================

Brief: Try to live update completions when input is >= N.

   Symbol: ‘mct-minimum-input’ (‘natnum’ type)

   By default, MCT expects the user to type ‘3’ characters before it
tries to compute completion candidates, display the ‘*Completions*’
buffer and keep it updated live to match any subsequent input.

   Setting this user option to a value greater than 1 can help reduce
the total number of candidates that are being computed.  That is because
the Completions can consist of thousands of items that all need to be
rendered at once in a buffer.

   In terms of the user experience, the minimum input threshold can make
sessions feel less visually demanding when the user (i) knows what they
are looking for and (ii) types fast enough so that the ‘*Completions*’
never have the time to pop up.

   This variable is ignored for commands or completion categories that
are specified in the ‘mct-completion-passlist’ and
‘mct-completion-blocklist’.

   *note Live updates per command or completion category::.


File: doc6ndv9v.info,  Node: Delay between live updates,  Next: Live updates per command or completion category,  Prev: Minimum input threshold,  Up: Customizations

2.3 Delay between live updates
==============================

Brief: Delay in seconds before updating the Completions’ buffer.

   Symbol: ‘mct-live-update-delay’ (‘number’ type)

   The delay in seconds between live updates of the Completions’ buffer.
The default value is ‘0.3’.

   This variable is ignored for commands or completion categories that
are specified in the ‘mct-completion-passlist’ and
‘mct-completion-blocklist’.

   *note Live updates per command or completion category::.


File: doc6ndv9v.info,  Node: Live updates per command or completion category,  Next: Size boundaries of the Completions,  Prev: Delay between live updates,  Up: Customizations

2.4 Live updates per command or completion category
===================================================

By default, MCT has the same behaviour across all types of completion.
Specifically, it respects the ‘mct-live-completion’ option on whether
and when to perform live completion, the ‘mct-minimum-input’ threshold
before doing so, and the ‘mct-live-update-delay’ between changes to the
‘*Completions*’ buffer.

   *note Live completion: Blocklist for commands or completion
categories.

   *note Minimum input threshold::.

   *note Delay between live updates::.

   A passlist and a blocklist can override those options for the
commands or categories specified.

* Menu:

* Passlist for commands or completion categories::
* Blocklist for commands or completion categories::
* Known completion categories::
* Find completion category::


File: doc6ndv9v.info,  Node: Passlist for commands or completion categories,  Next: Blocklist for commands or completion categories,  Up: Live updates per command or completion category

2.4.1 Passlist for commands or completion categories
----------------------------------------------------

Brief: List of symbols where live completions are always enabled.

   Symbol: ‘mct-completion-passlist’ (‘repeat symbol’ type)

   The value of this user option is a list of symbols.  Those can refer
to commands like ‘find-file’ or completion categories such as ‘file’,
‘buffer’, or what other packages define like Consult’s
‘consult-location’ category.

   Any entry in the passlist ignores the value of ‘mct-live-completion’
and the ‘mct-minimum-input’.  It also bypasses any possible delay
introduced by ‘mct-live-update-delay’.  In other words, it immediately
displays the ‘*Completions*’ buffer and instantly updates it to match
user input.

   When the ‘mct-completion-blocklist’ and the ‘mct-completion-passlist’
are in conflict, the former takes precedence.

   *note Known completion categories::.


File: doc6ndv9v.info,  Node: Blocklist for commands or completion categories,  Next: Known completion categories,  Prev: Passlist for commands or completion categories,  Up: Live updates per command or completion category

2.4.2 Blocklist for commands or completion categories
-----------------------------------------------------

Brief: List of symbols where live completions are always disabled.

   Symbol: ‘mct-completion-blocklist’ (‘repeat symbol’ type)

   The value of this user option is a list of symbols.  Those can refer
to commands like ‘find-file’ or completion categories such as ‘file’,
‘buffer’, or what other packages define like Consult’s
‘consult-location’ category.

   This means that they ignore ‘mct-live-completion’.  They do not
automatically display the Completions’ buffer, nor do they update it to
match user input.

   The Completions’ buffer can still be accessed with commands that
place it in a window (such as ‘mct-list-completions-toggle’,
‘mct-switch-to-completions-top’).

   When the ‘mct-completion-blocklist’ and the ‘mct-completion-passlist’
are in conflict, the former takes precedence.

   Perhaps a less drastic measure is to set ‘mct-minimum-input’ to an
appropriate value.  Or better use ‘mct-completion-passlist’.

   *note Known completion categories::.


File: doc6ndv9v.info,  Node: Known completion categories,  Next: Find completion category,  Prev: Blocklist for commands or completion categories,  Up: Live updates per command or completion category

2.4.3 Known completion categories
---------------------------------

Below are the known completion categories that can be added to the
‘mct-completion-passlist’ and ‘mct-completion-blocklist’ (and relevant
custom code).  This resource is non-exhaustive and will be updated to
match available information.

   • ‘bookmark’
   • ‘buffer’
   • ‘charset’
   • ‘coding-system’
   • ‘color’
   • ‘command’ (e.g.  ‘M-x’)
   • ‘customize-group’
   • ‘environment-variable’
   • ‘expression’
   • ‘face’
   • ‘file’
   • ‘function’ (the ‘describe-function’ command bound to ‘C-h f’)
   • ‘info-menu’
   • ‘imenu’
   • ‘input-method’
   • ‘kill-ring’
   • ‘library’
   • ‘minor-mode’
   • ‘multi-category’
   • ‘package’
   • ‘project-file’
   • ‘symbol’ (the ‘describe-symbol’ command bound to ‘C-h o’)
   • ‘theme’
   • ‘unicode-name’ (the ‘insert-char’ command bound to ‘C-x 8 RET’)
   • ‘variable’ (the ‘describe-variable’ command bound to ‘C-h v’)

   From the ‘consult’ package:

   • ‘consult-grep’
   • ‘consult-isearch’
   • ‘consult-isearch’
   • ‘consult-kmacro’
   • ‘consult-location’

   From the ‘embark’ package:

   • ‘embark-keybinding’

   In general, it is best not to add symbols which include several
thousands of candidates to the passlist.  So no ‘command’, ‘function’,
‘symbol’, ‘unicode-name’, ‘variable’.

   When in doubt, do not add a symbol to either the pass- or block-
list.

   *note Find completion category::.


File: doc6ndv9v.info,  Node: Find completion category,  Prev: Known completion categories,  Up: Live updates per command or completion category

2.4.4 Find completion category
------------------------------

While using a command that provides a minibuffer prompt, type ‘M-:’ (the
‘eval-expression’ command) and evaluate ‘(mct--completion-category)’.
It will return the completion category, if any.  Note that this only
works when the variable ‘enable-recursive-minibuffers’ is non-nil.

   To review echo area messages, use ‘C-h e’
(‘view-echo-area-messages’).

   *note Known completion categories::.


File: doc6ndv9v.info,  Node: Size boundaries of the Completions,  Next: Dynamic completion tables in mct-mode,  Prev: Live updates per command or completion category,  Up: Customizations

2.5 Size boundaries of the Completions
======================================

Brief: Set the maximum and minimum height of the Completions’ buffer.

   Symbol: ‘mct-completion-window-size’ (‘choice’ type between nil and
cons cell)

   The value is a cons cell in the form of ‘(max-height . min-height)’
where each value is either a natural number or a function which returns
such a number.

   The default maximum height of the window is calculated by the
function ‘mct--frame-height-fraction’, which finds the closest round
number to 1/3 of the frame’s height.  While the default minimum height
is 1.  This means that during live completions the Completions’ window
will shrink or grow to show candidates within the specified boundaries.
To disable this bouncing effect, set both max-height and min-height to
the same number.

   If nil, do not try to fit the Completions’ buffer to its window.

   *note Live completion::.


File: doc6ndv9v.info,  Node: Dynamic completion tables in mct-mode,  Next: Hide the Completions mode line,  Prev: Size boundaries of the Completions,  Up: Customizations

2.6 Dynamic completion tables in mct-mode
=========================================

Brief: Whether to keep dynamic completion live.

   Symbol: ‘mct-persist-dynamic-completion’ (‘boolean’ type)

   Possible values:

  1. ‘nil’
  2. ‘t’ (default)

   Without any intervention from MCT, the default Emacs behavior for
commands such as ‘find-file’ or for a ‘file’ completion category is to
hide the ‘*Completions*’ buffer after updating the list of candidates in
a non-exiting fashion (e.g.  select a directory and expect to continue
typing the path).  This, however, runs contrary to the interaction model
of MCT when it performs live completions, because the user expects the
Completions’ buffer to remain visible while typing out the path to the
file (*note Live completion::).

   When this user option is non-nil (the default) it makes all
non-exiting commands keep the ‘*Completions*’ visible when updating the
list of candidates.

   This applies to prompts in the ‘file’ completion category whenever
the user selects a candidate with ‘mct-choose-completion-no-exit’,
‘mct-edit-completion’, ‘minibuffer-complete’,
‘minibuffer-force-complete’ (i.e.  any command that does not exit the
minibuffer).

   *note Selecting candidates with mct-mode::.

   The two exceptions are (i) when the current completion session runs a
command or category that is blocked by the ‘mct-completion-blocklist’ or
(ii) the user option ‘mct-live-completion’ is nil.

   *note Blocklist for commands or completion categories::.

   The underlying rationale:

   Most completion commands present a flat list of candidates to choose
from.  Picking a candidate concludes the session.  Some prompts,
however, can recalculate the list of completions based on the selected
candidate.  A case in point is ‘find-file’ (or any command with the
‘file’ completion category) which dynamically adjusts the completions to
show only the elements which extend the given file system path.  We call
such cases “dynamic completion”.  Due to their particular nature, these
need to be handled explicitly.  The present user option is provided
primarily to raise awareness about this state of affairs.


File: doc6ndv9v.info,  Node: Hide the Completions mode line,  Next: Remove shadowed file paths,  Prev: Dynamic completion tables in mct-mode,  Up: Customizations

2.7 Hide the Completions mode line
==================================

Brief: Do not show a mode line in the Completions’ buffer.

   Symbol: ‘mct-hide-completion-mode-line’ (‘boolean’ type)

   By default, the ‘*Completions*’ buffer has its own mode line, just
like every other window.  Set this user option to non-nil to remove the
mode line.


File: doc6ndv9v.info,  Node: Remove shadowed file paths,  Next: MCT in the minibuffer and completion in regular buffers,  Prev: Hide the Completions mode line,  Up: Customizations

2.8 Remove shadowed file paths
==============================

Brief: Delete shadowed parts of file names from the minibuffer.

   Symbol: ‘mct-remove-shadowed-file-names’ (‘boolean’ type)

   When the built-in ‘file-name-shadow-mode’ is enabled and this user
option is non-nil, MCT will delete the part of the file path that is
shadowed (meaning that it is overriden) by the given input.

   For example, if the user types ‘~/’ after a long path name,
everything preceding the ‘~/’ is removed so the interactive selection
process starts again from the user’s ‘$HOME’.


File: doc6ndv9v.info,  Node: MCT in the minibuffer and completion in regular buffers,  Prev: Remove shadowed file paths,  Up: Customizations

2.9 MCT in the minibuffer and completion in regular buffers
===========================================================

Emacs draws a distinction between two types of completion sessions:

   • Completion where the minibuffer is involved (such as to switch
     buffers or find a file).

   • Completion in a regular buffer to expand the text before point.
     The minibuffer is not active.  We call this “in-buffer completion”
     or allude to the underlying function: ‘completion-in-region’.

   The former scenario is what MCT has supported since its inception.
Enable ‘mct-mode’ to get started.  There was a time where MCT also
supported in-buffer completion but this was discontinued in version
‘1.0.0’ of the package as Emacs 29 gained the requisite capabilities.
To get the familiar MCT key bindings for in-buffer completion, use these
in your init file:

     ;; Get the key bindings
     (let ((map completion-in-region-mode-map))
       (define-key map (kbd "C-n") #'minibuffer-next-completion)
       (define-key map (kbd "C-p") #'minibuffer-previous-completion)
       (define-key map (kbd "RET") #'minibuffer-choose-completion))

     ;; Tweak the appearance
     (setq completions-format 'one-column)
     (setq completion-show-help nil)
     (setq completion-auto-help t)

     ;; Optionally, tweak the appearance further
     (setq completions-detailed t)
     (setq completion-show-inline-help nil)
     (setq completions-max-height 6)
     (setq completions-highlight-face 'completions-highlight)

   Note that the in-buffer completions will produce a new buffer window
below the current one.  Some users find this intrusive.  In such a case,
the use of a popup box is better.  Consider the ‘corfu’ package by
Daniel Mendler, which uses such a popup (*note Alternatives::).


File: doc6ndv9v.info,  Node: Usage,  Next: Installation,  Prev: Customizations,  Up: Top

3 Usage
*******

This section outlines the various patterns of interaction that MCT
establishes.

* Menu:

* Cyclic behaviour for mct-mode::
* Selecting candidates with mct-mode::


File: doc6ndv9v.info,  Node: Cyclic behaviour for mct-mode,  Next: Selecting candidates with mct-mode,  Up: Usage

3.1 Cyclic behaviour for mct-mode
=================================

When ‘mct-mode’ is enabled, some new keymaps are activated which add
commands for cycling between the minibuffer and the completions.
Suppose the following standard layout:

     -----------------
     |        |      |
     | Buffers| Buf  |
     |        |      |
     -----------------
     |        |      |
     | Buf    | Buf  |
     |        |      |
     -----------------
     -----------------
     |               |
     |  Completions  |
     |               |
     -----------------
     -----------------
     |  Minibuffer   |
     -----------------

   When inside the minibuffer, pressing ‘C-n’ (or down arrow) takes you
to the top of the completions, while ‘C-p’ (or up arrow) moves to the
bottom.  The commands are ‘mct-switch-to-completions-top’ for the former
and ‘mct-switch-to-completions-bottom’ for the latter.  If the
‘*Completions*’ are not shown, then the buffer pops up automatically and
point moves to the given position.

   Similarly, while inside the ‘*Completions*’ buffer, ‘C-p’ (or up
arrow) at the top of the buffer switches to the minibuffer, while ‘C-n’
(or down arrow) at the bottom of the buffer also goes to the minibuffer.
If point is anywhere else inside the buffer, those key bindings perform
a regular line motion (if the ‘*Completions*’ are set to a grid view,
then the left and right arrow keys perform the corresponding lateral
motions).  The commands are ‘mct-previous-completion-or-mini’ and
‘mct-next-completion-or-mini’.  Both accept an optional numeric
argument.  If the Nth line lies outside the boundaries of the
completions’ buffer, they move the point to the minibuffer.

   The display of the ‘*Completions*’ can be toggled at any time from
inside the minibuffer with ‘C-l’ (mnemonic is “[l]ist completions” and
the command is ‘mct-list-completions-toggle’).


File: doc6ndv9v.info,  Node: Selecting candidates with mct-mode,  Prev: Cyclic behaviour for mct-mode,  Up: Usage

3.2 Selecting candidates with mct-mode
======================================

There are several ways to select a completion candidate with ‘mct-mode’.

  1. Suppose that you are typing ‘mod’ with the intent to select the
     ‘modus-themes.el’ buffer.  To complete the candidate follow up
     ‘mod’ with the ‘TAB’ key (‘minibuffer-complete’).  If the match is
     unique, the text will be expanded.  Otherwise the ‘*Completions*’
     buffer will appear.  This does not exit the minibuffer, meaning
     that it does not confirm your choice.  To confirm your choice, use
     ‘RET’.  If you ever make a mistake and expand the wrong candidate,
     just use ‘undo’.  Lastly note that if the candidates meet the
     ‘completion-cycle-threshold’ hitting ‘TAB’ again will switch
     between them.

  2. While cycling through the completions’ buffer, type ‘RET’ to select
     and confirm the current candidate (‘mct-choose-completion-exit’).
     This works for all types of completion prompts.

  3. Similar to the above, but without exiting the minibuffer (i.e.  to
     confirm your choice) is ‘mct-choose-completion-no-exit’ which is
     bound to ‘TAB’ in the completions’ buffer.  This is particularly
     useful for certain contexts where selecting a candidate does not
     necessarily mean that the process has to be finalised (e.g.  when
     using ‘find-file’).  In those cases, the event triggered by ‘TAB’
     is followed by the renewal of the list of completions, where
     relevant (e.g.  ‘TAB’ over a directory in ‘find-file’, which then
     shows the contents of that directory).

     The command can correctly expand completion candidates even when
     the active style in ‘completion-styles’ is ‘partial-completion’.
     In other words, if the minibuffer contains input like ‘~/G/P/m’ and
     the point is in the completions’ buffer over ‘Git/Projects/mct/’
     the minibuffer’ contents will become ‘~/Git/Projects/mct/’ and then
     show the contents of that directory.

  4. Type ‘M-e’ (‘mct-edit-completion’) in the completions’ buffer to
     place the current candidate in the minibuffer, without exiting the
     session.  This allows you to edit the text before confirming it.
     If point is in the minibuffer before performing this action, the
     current candidate is either the one at the top of the completions’
     buffer or that which is under the last known point in said buffer
     (the last known position is reset when the window is deleted).
     Internally, ‘mct-edit-completion’ uses
     ‘mct-choose-completion-no-exit’ to expand the completion candidate,
     so it retains its behaviour (as explained right above).

     Sometimes there is a need to switch to the minibuffer without
     selecting the candidate at point, such as to retype some part of
     the input.  In those cases, type ‘e’ in the completions’ buffer to
     move to the minibuffer.  The command is called
     ‘mct-focus-minibuffer’, which can also be assigned to the global
     keymap, though MCT leaves such a decision up to the user (same for
     ‘mct-focus-mini-or-completions’).

  5. In prompts that allow the selection of multiple candidates
     (internally via the ‘completing-read-multiple’ function) using
     ‘M-RET’ (‘mct-choose-completion-dwim’) in the ‘*Completions*’ will
     append the candidate at point to the list of selections and keep
     the completions available so that another item may be selected.
     Any of the aforementioned applicable methods can confirm the final
     selection.  If, say, you want to pick a total of three candidates,
     do ‘M-RET’ for the first two and ‘RET’
     (‘mct-choose-completion-exit’) for the last one.  In contexts that
     are not CRM-powered, the ‘M-RET’ has the same effect as ‘TAB’
     (‘mct-choose-completion-no-exit’).

     *note Indicator for completing-read-multiple::.

  6. When point is at the minibuffer, select the current candidate in
     the completions buffer with ‘C-RET’ (‘mct-complete-and-exit’),
     which has the same effect as first completing with ‘TAB’ and then
     immediately exit the minibuffer with the completed candidate as the
     selected one.

  7. Emacs 28 has the ability to group candidates inside the
     completions’ buffer under headings.  For example, the Consult
     package makes use of those (*note Third-party extensions::).  MCT
     provides motions that jump between such headings, placing the point
     at the first candidate right below the heading’s text.  Use ‘M-n’
     (‘mct-next-completion-group’) and ‘M-p’
     (‘mct-previous-completion-group’) to move to the next or previous
     one, respectively (also work with they keys for ‘forward-paragraph’
     and ‘backward-paragraph’).  Both commands accept an optional
     numeric argument.  For the sake of avoiding surprises, these
     commands do not cycle between the completions and the minibuffer:
     they stop at the first or last heading.


File: doc6ndv9v.info,  Node: Installation,  Next: Sample setup,  Prev: Usage,  Up: Top

4 Installation
**************

* Menu:

* Install the package::
* Manual installation method::


File: doc6ndv9v.info,  Node: Install the package,  Next: Manual installation method,  Up: Installation

4.1 Install the package
=======================

‘mct’ is available on the official GNU ELPA archive for users of Emacs
version 27 or higher.  One can install the package without any further
configuration.  The following commands shall suffice:

     M-x package-refresh-contents
     M-x package-install RET mct

   A package is also available via Guix:

     guix package -i emacs-mct


File: doc6ndv9v.info,  Node: Manual installation method,  Prev: Install the package,  Up: Installation

4.2 Manual installation method
==============================

Assuming your Emacs files are found in ‘~/.emacs.d/’, execute the
following commands in a shell prompt:

     cd ~/.emacs.d

     # Create a directory for manually-installed packages
     mkdir manual-packages

     # Go to the new directory
     cd manual-packages

     # Clone this repo and name it "mct"
     git clone https://git.sr.ht/~protesilaos/mct mct

   Finally, in your ‘init.el’ (or equivalent) evaluate this:

     ;; Make Elisp files in that directory available to the user.
     (add-to-list 'load-path "~/.emacs.d/manual-packages/mct")

   Everything is in place to set up the package.


File: doc6ndv9v.info,  Node: Sample setup,  Next: Keymaps,  Prev: Installation,  Up: Top

5 Sample setup
**************

Minimal setup for the minibuffer and in-buffer completion:

     (require 'mct)
     (mct-mode 1)

   And with more options:

     (require 'mct)

     (setq mct-completion-window-size (cons #'mct-frame-height-third 1))
     (setq mct-remove-shadowed-file-names t) ; works when `file-name-shadow-mode' is enabled
     (setq mct-hide-completion-mode-line t)
     (setq mct-minimum-input 3)
     (setq mct-live-completion t)
     (setq mct-live-update-delay 0.6)
     (setq mct-persist-dynamic-completion t)

     ;; This is for commands or completion categories that should always pop
     ;; up the completions' buffer.  It circumvents the default method of
     ;; waiting for some user input (see `mct-minimum-input') before
     ;; displaying and updating the completions' buffer.
     (setq mct-completion-passlist
           '(;; Some commands
             Info-goto-node
             Info-index
             Info-menu
             vc-retrieve-tag
             ;; Some completion categories
             imenu
             file
             buffer
             kill-ring
             consult-location))

     ;; The blocklist follows the same principle as the passlist, except it
     ;; disables live completions altogether.
     (setq mct-completion-blocklist nil)

     (mct-mode 1)

   Other useful extras from the Emacs source code (read their doc
strings):

     (setq completion-styles
           '(basic substring initials flex partial-completion))
     (setq completion-category-overrides
           '((file (styles . (basic partial-completion initials substring)))))

     (setq completion-cycle-threshold 2)
     (setq completion-ignore-case t)
     (setq completion-show-inline-help nil)

     (setq completions-detailed t)

     (setq enable-recursive-minibuffers t)
     (setq minibuffer-eldef-shorten-default t)

     (setq read-buffer-completion-ignore-case t)
     (setq read-file-name-completion-ignore-case t)

     (setq resize-mini-windows t)
     (setq minibuffer-eldef-shorten-default t)

     (file-name-shadow-mode 1)
     (minibuffer-depth-indicate-mode 1)
     (minibuffer-electric-default-mode 1)

     ;; Do not allow the cursor in the minibuffer prompt
     (setq minibuffer-prompt-properties
           '(read-only t cursor-intangible t face minibuffer-prompt))

     (add-hook 'minibuffer-setup-hook #'cursor-intangible-mode)

     ;;; Minibuffer history
     (require 'savehist)
     (setq savehist-file (locate-user-emacs-file "savehist"))
     (setq history-length 500)
     (setq history-delete-duplicates t)
     (setq savehist-save-minibuffer-history t)
     (add-hook 'after-init-hook #'savehist-mode)

     ;;; Third-party extensions

     ;;;; Enable Consult previews in the Completions buffer.
     ;; Requires the `consult' package.
     (add-hook 'completion-list-mode-hook #'consult-preview-at-point-mode)

     ;;;; Setup for Orderless
     ;; Requires the `orderless' package

     ;; We make the SPC key insert a literal space and the same for the
     ;; question mark.  Spaces are used to delimit orderless groups, while
     ;; the quedtion mark is a valid regexp character.
     (let ((map minibuffer-local-completion-map))
       (define-key map (kbd "SPC") nil)
       (define-key map (kbd "?") nil))

     ;; Because SPC works for Orderless and is trivial to activate, I like to
     ;; put `orderless' at the end of my `completion-styles'.  Like this:
     (setq completion-styles
           '(basic substring initials flex partial-completion orderless))
     (setq completion-category-overrides
           '((file (styles . (basic partial-completion orderless)))))


File: doc6ndv9v.info,  Node: Keymaps,  Next: User-level tweaks or custom code,  Prev: Sample setup,  Up: Top

6 Keymaps
*********

MCT defines its own keymaps, which extend those that are active in the
minibuffer and the ‘*Completions*’ buffer, respectively:

   • ‘mct-completion-list-mode-map’
   • ‘mct-minibuffer-local-completion-map’

   You can invoke ‘describe-keymap’ to learn more about them.

   If you want to edit any key bindings, do it in these keymaps, not in
those they extend and override (the names of the original ones are the
same as above, minus the ‘mct-’ prefix).


File: doc6ndv9v.info,  Node: User-level tweaks or custom code,  Next: Third-party extensions,  Prev: Keymaps,  Up: Top

7 User-level tweaks or custom code
**********************************

In this section we cover custom code that builds on what MCT offers.

* Menu:

* Sort completion candidates on Emacs 29::
* Indicator for completing-read-multiple::
* Ido-style navigation through directories::


File: doc6ndv9v.info,  Node: Sort completion candidates on Emacs 29,  Next: Indicator for completing-read-multiple,  Up: User-level tweaks or custom code

7.1 Sort completion candidates on Emacs 29
==========================================

Starting with Emacs 29 (current development target), the user option
‘completions-sort’ controls the sorting method of candidates in the
‘*Completions*’ buffer.  Beside the default of using ‘string-lessp’, it
accepts a custom function.  Consider any of the following examples:

     ;; Some sorting functions...
     (defun my-sort-by-alpha-length (elems)
       "Sort ELEMS first alphabetically, then by length."
       (sort elems (lambda (c1 c2)
                     (or (string-version-lessp c1 c2)
                         (< (length c1) (length c2))))))

     (defun my-sort-by-history (elems)
       "Sort ELEMS by minibuffer history.
     Use `mct-sort-sort-by-alpha-length' if no history is available."
       (if-let ((hist (and (not (eq minibuffer-history-variable t))
                           (symbol-value minibuffer-history-variable))))
           (minibuffer--sort-by-position hist elems)
         (my-sort-by-alpha-length elems)))

     (defun my-sort-multi-category (elems)
       "Sort ELEMS per completion category."
       (pcase (mct--completion-category)
         ('nil elems) ; no sorting
         ('kill-ring elems)
         ('project-file (my-sort-by-alpha-length elems))
         (_ (my-sort-by-history elems))))

     ;; Specify the sorting function.
     (setq completions-sort #'my-sort-multi-category)

   *note Known completion categories::.


File: doc6ndv9v.info,  Node: Indicator for completing-read-multiple,  Next: Ido-style navigation through directories,  Prev: Sort completion candidates on Emacs 29,  Up: User-level tweaks or custom code

7.2 Indicator for completing-read-multiple
==========================================

Previous versions of MCT would prepend a ‘[CRM]’ tag to the minibuffer
prompt of commands powered by ‘completing-read-multiple’.  While this is
a nice usability enhancement, it is not specific to MCT and thus should
not be part of ‘mct.el’.  Use this in your init file instead:

     ;; Add prompt indicator to `completing-read-multiple'.  We display
     ;; [`completing-read-multiple': <separator>], e.g.,
     ;; [`completing-read-multiple': ,] if the separator is a comma.  This
     ;; is adapted from the README of the `vertico' package by Daniel
     ;; Mendler.  I made some small tweaks to propertize the segments of
     ;; the prompt.
     (defun crm-indicator (args)
       (cons (format "[`crm-separator': %s]  %s"
                     (propertize
                      (replace-regexp-in-string
                       "\\`\\[.*?]\\*\\|\\[.*?]\\*\\'" ""
                       crm-separator)
                      'face 'error)
                     (car args))
             (cdr args)))

     (advice-add #'completing-read-multiple :filter-args #'crm-indicator)


File: doc6ndv9v.info,  Node: Ido-style navigation through directories,  Prev: Indicator for completing-read-multiple,  Up: User-level tweaks or custom code

7.3 Ido-style navigation through directories
============================================

Older versions of MCT had a command for file navigation that would
delete the whole directory component before point, effectively going
back up one directory.  While the functionality can be useful, it is not
integral to the MCT experience and thus should not belong in ‘mct.el’.
Add this to your own configuration file instead:

     ;; Adaptation of `icomplete-fido-backward-updir'.
     (defun my-backward-updir ()
       "Delete char before point or go up a directory."
       (interactive nil mct-mode)
       (cond
        ((and (eq (char-before) ?/)
              (eq (mct--completion-category) 'file))
         (when (string-equal (minibuffer-contents) "~/")
           (delete-minibuffer-contents)
           (insert (expand-file-name "~/"))
           (goto-char (line-end-position)))
         (save-excursion
           (goto-char (1- (point)))
           (when (search-backward "/" (minibuffer-prompt-end) t)
             (delete-region (1+ (point)) (point-max)))))
        (t (call-interactively 'backward-delete-char))))

     (define-key minibuffer-local-filename-completion-map (kbd "DEL") #'my-backward-updir)


File: doc6ndv9v.info,  Node: Third-party extensions,  Next: Alternatives,  Prev: User-level tweaks or custom code,  Up: Top

8 Third-party extensions
************************

MCT only tweaks the default minibuffer.  To get more out of it, consider
these exceptionally well-crafted extras:

Consult (https://github.com/minad/consult/) by Daniel Mendler
     Adds several commands that make interacting with the minibuffer
     more powerful.  There also are multiple packages that build on it,
     such as consult-dir (https://github.com/karthink/consult-dir) by
     Karthik Chikmagalur and consult-notmuch
     (https://codeberg.org/jao/consult-notmuch) by José Antonio Ortega
     Ruiz.

Embark (https://github.com/oantolin/embark/) by Omar Antolín Camarena
     Provides configurable contextual actions for completions and many
     other constructs inside buffers.  A genius package!

Marginalia (https://github.com/minad/marginalia) by Daniel and Omar
     Displays informative annotations for all known types of completion
     candidates.

Orderless (https://github.com/oantolin/orderless/) by Omar
     A completion style that matches a variety of patterns (regexp,
     flex, initialism, etc.)  regardless of the order they appear in.

all-the-icons-completion (https://github.com/iyefrat/all-the-icons-completion) by Itai Y. Efrat
     Glue code that adds icons from the ‘all-the-icons’ package to the
     ‘*Completions*’ buffer.  It can make things prettier and/or more
     informative, while it can also be combined with Marginalia.

   MCT does not support the use-case of ‘completion-in-region’.  This is
the kind of completion session that is done inside the buffer and does
not involve the minibuffer.  However, you may prefer:

Corfu (https://github.com/minad/corfu/) by Daniel Mendler
     An interface for the ‘completion-in-region’ which uses a child
     frame (basically a pop-up) at the position of the cursor to display
     candidates.  As with all of Daniel’s packages, Corfu aims for a
     clean implementation that does the right thing by being consistent
     with core Emacs mechanisms.

Cape (https://github.com/minad/cape) also by Daniel
     Additional ‘completion-at-point-functions’ (CAPFs) that extend
     those of core Emacs.  These backends can be used by packages that
     visualise ‘completion-in-region’.

* Menu:

* Enable Consult previews::


File: doc6ndv9v.info,  Node: Enable Consult previews,  Up: Third-party extensions

8.1 Enable Consult previews
===========================

One of the nice features of the Consult package is the ability to
preview the candidate at point.  All we need to enable it in the
‘*Completions*’ buffer is the following snippet:

     (add-hook 'completion-list-mode-hook #'consult-preview-at-point-mode)


File: doc6ndv9v.info,  Node: Alternatives,  Next: Acknowledgements,  Prev: Third-party extensions,  Up: Top

9 Alternatives
**************

In the grand scheme of things, it may be helpful to think of MCT as
proof-of-concept on how the default Emacs completion can become more
expressive.  MCT’s value rests in its potential to inspire developers to
(i) patch Emacs so that its out-of-the-box completion is more
interactive, and (ii) expose the shortcomings in the current
implementation of the ‘*Completions*’ buffer, which should again provide
an impetus for further changes to Emacs.  Otherwise, MCT is meant for
users who can tolerate the status quo and simply want a thin layer of
interactivity for minibuffer completion, in-buffer completion, and their
intersection with the Completions’ buffer.

   Like MCT, these alternatives provide a thin layer of functionality
over the built-in infrastructure.  Unlike MCT, they are not constrained
by the design of the ‘*Completions*’ buffer and concomitant
functionality.  They all make for a natural complement to the standard
Emacs experience (also *note Extensions: Third-party extensions.).

Vertico (https://github.com/minad/vertico) by Daniel Mendler
     this is a more mature and feature-rich package with a large user
     base and a highly competent maintainer.

     Vertico has some performance optimizations on how candidates are
     sorted and presented, which means that it displays results right
     away without any noticeable performance penalty.  Whereas MCT does
     not change the underlying behaviour of how candidates are
     displayed.  As such, MCT will be slower in scenaria where there are
     lots of candidates because core Emacs lacks those optimizations.
     One such case is with the ‘describe-symbol’ (‘C-h o’) prompt.  If
     the user asks for the completions’ buffer without inputting any
     character (so without narrowing the list), there will be a
     noticeable delay before the buffer is rendered.  This is mitigated
     in MCT by the requirement for ‘mct-minimum-input’, though the
     underlying mechanics remain intact.

     In terms of the interaction model, the main difference between
     Vertico and MCT is that the former uses the minibuffer by default
     and shows the completions there.  The minibuffer is expanded to
     show the candidates in a vertical list.  Whereas MCT keeps the
     ‘*Completions*’ buffer and the minibuffer as separate entities, the
     way standard Emacs does it.

     The presence of a fully fledged buffer means that the user can
     invoke all relevant commands at their disposal, such as to write
     the buffer to a file for future review, use Isearch to move around,
     copy a string or rectangle to a register, and so on.

     Vertico has official extensions which can make it work exactly like
     MCT without any of MCT’s drawbacks.  These extensions can also
     expand Vertico’s powers such as by providing granular control over
     the exact style of presentation for any given completion category
     (e.g.  display Imenu in a separate buffer, show the
     ‘switch-to-buffer’ list horizontally in the minibuffer, and present
     ‘find-file’ in a vertical list—whatever the user wants).

     All things considered, there is no compelling reason why one may
     prefer MCT over Vertico in terms of the available functionality:
     Vertico is better.

Icomplete and fido-mode (built-in, multiple authors)
     Icomplete is closer in spirit to Vertico, as it too uses the
     minibuffer to display completion candidates.  By default, it
     presents the list horizontally, though there exists
     ‘icomplete-vertical-mode’ (and ‘fido-vertical-mode’).

     For our purposes, Icomplete and Fido are the same in terms of the
     paradigm they follow.  The latter is a re-spin of the former, as it
     adjusts certain variables and binds some commands for the
     convenience of the end-user.  ‘fido-mode’ and its accoutrements are
     defined in ‘icomplete.el’.

     What MCT borrows from Icomplete is for the input delay (explained
     elsewhere in this document).  Internally, I also learnt how to
     extend local keymaps by studying ‘icomplete.el’.

     I had used Icomplete for several months before moving to what now
     has become ‘mct.el’.  I think it is excellent at providing a thin
     layer over the built-in infrastructure.


File: doc6ndv9v.info,  Node: Acknowledgements,  Next: Official sources,  Prev: Alternatives,  Up: Top

10 Acknowledgements
*******************

MCT is meant to be a collective effort.  Every bit of help matters.

Author/maintainer
     Protesilaos Stavrou.

Contributions to code or documentation
     Daniel Mendler, James Norman Vladimir Cash, José Antonio Ortega
     Ruiz, Juri Linkov, Philip Kaludercic, Tomasz Hołubowicz.

Ideas and user feedback
     Andrew Tropin, Benjamin (@zealotrush), Case Duckworth, Chris
     Burroughs, Jonathan Irving, José Antonio Ortega Ruiz, Kostadin
     Ninev, Manuel Uberti, Morgan Willcock, Philip Kaludercic, Theodor
     Thornhill, Tomasz Hołubowicz, Z.Du.  As well as users: danrobi11.

Packaging
     Andrew Tropin and Nicolas Goaziou (Guix).

Inspiration for certain features
     ‘icomplete.el’ (built-in—multiple authors), Daniel Mendler
     (‘vertico’), Omar Antolín Camarena (‘embark’, ‘live-completions’).


File: doc6ndv9v.info,  Node: Official sources,  Next: GNU Free Documentation License,  Prev: Acknowledgements,  Up: Top

11 Official sources
*******************

Manual
     <https://protesilaos.com/emacs/mct>
Change log
     <https://protesilaos.com/emacs/mct-changelog>
Source code
     <https://git.sr.ht/~protesilaos/mct>
Mailing list
     <https://lists.sr.ht/~protesilaos/mct>


File: doc6ndv9v.info,  Node: GNU Free Documentation License,  Next: Indices,  Prev: Official sources,  Up: Top

Appendix A GNU Free Documentation License
*****************************************

                     Version 1.3, 3 November 2008

     Copyright © 2000, 2001, 2002, 2007, 2008 Free Software Foundation, Inc.
     <https://fsf.org/>

     Everyone is permitted to copy and distribute verbatim copies
     of this license document, but changing it is not allowed.

  0. PREAMBLE

     The purpose of this License is to make a manual, textbook, or other
     functional and useful document “free” in the sense of freedom: to
     assure everyone the effective freedom to copy and redistribute it,
     with or without modifying it, either commercially or
     noncommercially.  Secondarily, this License preserves for the
     author and publisher a way to get credit for their work, while not
     being considered responsible for modifications made by others.

     This License is a kind of “copyleft”, which means that derivative
     works of the document must themselves be free in the same sense.
     It complements the GNU General Public License, which is a copyleft
     license designed for free software.

     We have designed this License in order to use it for manuals for
     free software, because free software needs free documentation: a
     free program should come with manuals providing the same freedoms
     that the software does.  But this License is not limited to
     software manuals; it can be used for any textual work, regardless
     of subject matter or whether it is published as a printed book.  We
     recommend this License principally for works whose purpose is
     instruction or reference.

  1. APPLICABILITY AND DEFINITIONS

     This License applies to any manual or other work, in any medium,
     that contains a notice placed by the copyright holder saying it can
     be distributed under the terms of this License.  Such a notice
     grants a world-wide, royalty-free license, unlimited in duration,
     to use that work under the conditions stated herein.  The
     “Document”, below, refers to any such manual or work.  Any member
     of the public is a licensee, and is addressed as “you”.  You accept
     the license if you copy, modify or distribute the work in a way
     requiring permission under copyright law.

     A “Modified Version” of the Document means any work containing the
     Document or a portion of it, either copied verbatim, or with
     modifications and/or translated into another language.

     A “Secondary Section” is a named appendix or a front-matter section
     of the Document that deals exclusively with the relationship of the
     publishers or authors of the Document to the Document’s overall
     subject (or to related matters) and contains nothing that could
     fall directly within that overall subject.  (Thus, if the Document
     is in part a textbook of mathematics, a Secondary Section may not
     explain any mathematics.)  The relationship could be a matter of
     historical connection with the subject or with related matters, or
     of legal, commercial, philosophical, ethical or political position
     regarding them.

     The “Invariant Sections” are certain Secondary Sections whose
     titles are designated, as being those of Invariant Sections, in the
     notice that says that the Document is released under this License.
     If a section does not fit the above definition of Secondary then it
     is not allowed to be designated as Invariant.  The Document may
     contain zero Invariant Sections.  If the Document does not identify
     any Invariant Sections then there are none.

     The “Cover Texts” are certain short passages of text that are
     listed, as Front-Cover Texts or Back-Cover Texts, in the notice
     that says that the Document is released under this License.  A
     Front-Cover Text may be at most 5 words, and a Back-Cover Text may
     be at most 25 words.

     A “Transparent” copy of the Document means a machine-readable copy,
     represented in a format whose specification is available to the
     general public, that is suitable for revising the document
     straightforwardly with generic text editors or (for images composed
     of pixels) generic paint programs or (for drawings) some widely
     available drawing editor, and that is suitable for input to text
     formatters or for automatic translation to a variety of formats
     suitable for input to text formatters.  A copy made in an otherwise
     Transparent file format whose markup, or absence of markup, has
     been arranged to thwart or discourage subsequent modification by
     readers is not Transparent.  An image format is not Transparent if
     used for any substantial amount of text.  A copy that is not
     “Transparent” is called “Opaque”.

     Examples of suitable formats for Transparent copies include plain
     ASCII without markup, Texinfo input format, LaTeX input format,
     SGML or XML using a publicly available DTD, and standard-conforming
     simple HTML, PostScript or PDF designed for human modification.
     Examples of transparent image formats include PNG, XCF and JPG.
     Opaque formats include proprietary formats that can be read and
     edited only by proprietary word processors, SGML or XML for which
     the DTD and/or processing tools are not generally available, and
     the machine-generated HTML, PostScript or PDF produced by some word
     processors for output purposes only.

     The “Title Page” means, for a printed book, the title page itself,
     plus such following pages as are needed to hold, legibly, the
     material this License requires to appear in the title page.  For
     works in formats which do not have any title page as such, “Title
     Page” means the text near the most prominent appearance of the
     work’s title, preceding the beginning of the body of the text.

     The “publisher” means any person or entity that distributes copies
     of the Document to the public.

     A section “Entitled XYZ” means a named subunit of the Document
     whose title either is precisely XYZ or contains XYZ in parentheses
     following text that translates XYZ in another language.  (Here XYZ
     stands for a specific section name mentioned below, such as
     “Acknowledgements”, “Dedications”, “Endorsements”, or “History”.)
     To “Preserve the Title” of such a section when you modify the
     Document means that it remains a section “Entitled XYZ” according
     to this definition.

     The Document may include Warranty Disclaimers next to the notice
     which states that this License applies to the Document.  These
     Warranty Disclaimers are considered to be included by reference in
     this License, but only as regards disclaiming warranties: any other
     implication that these Warranty Disclaimers may have is void and
     has no effect on the meaning of this License.

  2. VERBATIM COPYING

     You may copy and distribute the Document in any medium, either
     commercially or noncommercially, provided that this License, the
     copyright notices, and the license notice saying this License
     applies to the Document are reproduced in all copies, and that you
     add no other conditions whatsoever to those of this License.  You
     may not use technical measures to obstruct or control the reading
     or further copying of the copies you make or distribute.  However,
     you may accept compensation in exchange for copies.  If you
     distribute a large enough number of copies you must also follow the
     conditions in section 3.

     You may also lend copies, under the same conditions stated above,
     and you may publicly display copies.

  3. COPYING IN QUANTITY

     If you publish printed copies (or copies in media that commonly
     have printed covers) of the Document, numbering more than 100, and
     the Document’s license notice requires Cover Texts, you must
     enclose the copies in covers that carry, clearly and legibly, all
     these Cover Texts: Front-Cover Texts on the front cover, and
     Back-Cover Texts on the back cover.  Both covers must also clearly
     and legibly identify you as the publisher of these copies.  The
     front cover must present the full title with all words of the title
     equally prominent and visible.  You may add other material on the
     covers in addition.  Copying with changes limited to the covers, as
     long as they preserve the title of the Document and satisfy these
     conditions, can be treated as verbatim copying in other respects.

     If the required texts for either cover are too voluminous to fit
     legibly, you should put the first ones listed (as many as fit
     reasonably) on the actual cover, and continue the rest onto
     adjacent pages.

     If you publish or distribute Opaque copies of the Document
     numbering more than 100, you must either include a machine-readable
     Transparent copy along with each Opaque copy, or state in or with
     each Opaque copy a computer-network location from which the general
     network-using public has access to download using public-standard
     network protocols a complete Transparent copy of the Document, free
     of added material.  If you use the latter option, you must take
     reasonably prudent steps, when you begin distribution of Opaque
     copies in quantity, to ensure that this Transparent copy will
     remain thus accessible at the stated location until at least one
     year after the last time you distribute an Opaque copy (directly or
     through your agents or retailers) of that edition to the public.

     It is requested, but not required, that you contact the authors of
     the Document well before redistributing any large number of copies,
     to give them a chance to provide you with an updated version of the
     Document.

  4. MODIFICATIONS

     You may copy and distribute a Modified Version of the Document
     under the conditions of sections 2 and 3 above, provided that you
     release the Modified Version under precisely this License, with the
     Modified Version filling the role of the Document, thus licensing
     distribution and modification of the Modified Version to whoever
     possesses a copy of it.  In addition, you must do these things in
     the Modified Version:

       A. Use in the Title Page (and on the covers, if any) a title
          distinct from that of the Document, and from those of previous
          versions (which should, if there were any, be listed in the
          History section of the Document).  You may use the same title
          as a previous version if the original publisher of that
          version gives permission.

       B. List on the Title Page, as authors, one or more persons or
          entities responsible for authorship of the modifications in
          the Modified Version, together with at least five of the
          principal authors of the Document (all of its principal
          authors, if it has fewer than five), unless they release you
          from this requirement.

       C. State on the Title page the name of the publisher of the
          Modified Version, as the publisher.

       D. Preserve all the copyright notices of the Document.

       E. Add an appropriate copyright notice for your modifications
          adjacent to the other copyright notices.

       F. Include, immediately after the copyright notices, a license
          notice giving the public permission to use the Modified
          Version under the terms of this License, in the form shown in
          the Addendum below.

       G. Preserve in that license notice the full lists of Invariant
          Sections and required Cover Texts given in the Document’s
          license notice.

       H. Include an unaltered copy of this License.

       I. Preserve the section Entitled “History”, Preserve its Title,
          and add to it an item stating at least the title, year, new
          authors, and publisher of the Modified Version as given on the
          Title Page.  If there is no section Entitled “History” in the
          Document, create one stating the title, year, authors, and
          publisher of the Document as given on its Title Page, then add
          an item describing the Modified Version as stated in the
          previous sentence.

       J. Preserve the network location, if any, given in the Document
          for public access to a Transparent copy of the Document, and
          likewise the network locations given in the Document for
          previous versions it was based on.  These may be placed in the
          “History” section.  You may omit a network location for a work
          that was published at least four years before the Document
          itself, or if the original publisher of the version it refers
          to gives permission.

       K. For any section Entitled “Acknowledgements” or “Dedications”,
          Preserve the Title of the section, and preserve in the section
          all the substance and tone of each of the contributor
          acknowledgements and/or dedications given therein.

       L. Preserve all the Invariant Sections of the Document, unaltered
          in their text and in their titles.  Section numbers or the
          equivalent are not considered part of the section titles.

       M. Delete any section Entitled “Endorsements”.  Such a section
          may not be included in the Modified Version.

       N. Do not retitle any existing section to be Entitled
          “Endorsements” or to conflict in title with any Invariant
          Section.

       O. Preserve any Warranty Disclaimers.

     If the Modified Version includes new front-matter sections or
     appendices that qualify as Secondary Sections and contain no
     material copied from the Document, you may at your option designate
     some or all of these sections as invariant.  To do this, add their
     titles to the list of Invariant Sections in the Modified Version’s
     license notice.  These titles must be distinct from any other
     section titles.

     You may add a section Entitled “Endorsements”, provided it contains
     nothing but endorsements of your Modified Version by various
     parties—for example, statements of peer review or that the text has
     been approved by an organization as the authoritative definition of
     a standard.

     You may add a passage of up to five words as a Front-Cover Text,
     and a passage of up to 25 words as a Back-Cover Text, to the end of
     the list of Cover Texts in the Modified Version.  Only one passage
     of Front-Cover Text and one of Back-Cover Text may be added by (or
     through arrangements made by) any one entity.  If the Document
     already includes a cover text for the same cover, previously added
     by you or by arrangement made by the same entity you are acting on
     behalf of, you may not add another; but you may replace the old
     one, on explicit permission from the previous publisher that added
     the old one.

     The author(s) and publisher(s) of the Document do not by this
     License give permission to use their names for publicity for or to
     assert or imply endorsement of any Modified Version.

  5. COMBINING DOCUMENTS

     You may combine the Document with other documents released under
     this License, under the terms defined in section 4 above for
     modified versions, provided that you include in the combination all
     of the Invariant Sections of all of the original documents,
     unmodified, and list them all as Invariant Sections of your
     combined work in its license notice, and that you preserve all
     their Warranty Disclaimers.

     The combined work need only contain one copy of this License, and
     multiple identical Invariant Sections may be replaced with a single
     copy.  If there are multiple Invariant Sections with the same name
     but different contents, make the title of each such section unique
     by adding at the end of it, in parentheses, the name of the
     original author or publisher of that section if known, or else a
     unique number.  Make the same adjustment to the section titles in
     the list of Invariant Sections in the license notice of the
     combined work.

     In the combination, you must combine any sections Entitled
     “History” in the various original documents, forming one section
     Entitled “History”; likewise combine any sections Entitled
     “Acknowledgements”, and any sections Entitled “Dedications”.  You
     must delete all sections Entitled “Endorsements.”

  6. COLLECTIONS OF DOCUMENTS

     You may make a collection consisting of the Document and other
     documents released under this License, and replace the individual
     copies of this License in the various documents with a single copy
     that is included in the collection, provided that you follow the
     rules of this License for verbatim copying of each of the documents
     in all other respects.

     You may extract a single document from such a collection, and
     distribute it individually under this License, provided you insert
     a copy of this License into the extracted document, and follow this
     License in all other respects regarding verbatim copying of that
     document.

  7. AGGREGATION WITH INDEPENDENT WORKS

     A compilation of the Document or its derivatives with other
     separate and independent documents or works, in or on a volume of a
     storage or distribution medium, is called an “aggregate” if the
     copyright resulting from the compilation is not used to limit the
     legal rights of the compilation’s users beyond what the individual
     works permit.  When the Document is included in an aggregate, this
     License does not apply to the other works in the aggregate which
     are not themselves derivative works of the Document.

     If the Cover Text requirement of section 3 is applicable to these
     copies of the Document, then if the Document is less than one half
     of the entire aggregate, the Document’s Cover Texts may be placed
     on covers that bracket the Document within the aggregate, or the
     electronic equivalent of covers if the Document is in electronic
     form.  Otherwise they must appear on printed covers that bracket
     the whole aggregate.

  8. TRANSLATION

     Translation is considered a kind of modification, so you may
     distribute translations of the Document under the terms of section
     4.  Replacing Invariant Sections with translations requires special
     permission from their copyright holders, but you may include
     translations of some or all Invariant Sections in addition to the
     original versions of these Invariant Sections.  You may include a
     translation of this License, and all the license notices in the
     Document, and any Warranty Disclaimers, provided that you also
     include the original English version of this License and the
     original versions of those notices and disclaimers.  In case of a
     disagreement between the translation and the original version of
     this License or a notice or disclaimer, the original version will
     prevail.

     If a section in the Document is Entitled “Acknowledgements”,
     “Dedications”, or “History”, the requirement (section 4) to
     Preserve its Title (section 1) will typically require changing the
     actual title.

  9. TERMINATION

     You may not copy, modify, sublicense, or distribute the Document
     except as expressly provided under this License.  Any attempt
     otherwise to copy, modify, sublicense, or distribute it is void,
     and will automatically terminate your rights under this License.

     However, if you cease all violation of this License, then your
     license from a particular copyright holder is reinstated (a)
     provisionally, unless and until the copyright holder explicitly and
     finally terminates your license, and (b) permanently, if the
     copyright holder fails to notify you of the violation by some
     reasonable means prior to 60 days after the cessation.

     Moreover, your license from a particular copyright holder is
     reinstated permanently if the copyright holder notifies you of the
     violation by some reasonable means, this is the first time you have
     received notice of violation of this License (for any work) from
     that copyright holder, and you cure the violation prior to 30 days
     after your receipt of the notice.

     Termination of your rights under this section does not terminate
     the licenses of parties who have received copies or rights from you
     under this License.  If your rights have been terminated and not
     permanently reinstated, receipt of a copy of some or all of the
     same material does not give you any rights to use it.

  10. FUTURE REVISIONS OF THIS LICENSE

     The Free Software Foundation may publish new, revised versions of
     the GNU Free Documentation License from time to time.  Such new
     versions will be similar in spirit to the present version, but may
     differ in detail to address new problems or concerns.  See
     <https://www.gnu.org/licenses/>.

     Each version of the License is given a distinguishing version
     number.  If the Document specifies that a particular numbered
     version of this License “or any later version” applies to it, you
     have the option of following the terms and conditions either of
     that specified version or of any later version that has been
     published (not as a draft) by the Free Software Foundation.  If the
     Document does not specify a version number of this License, you may
     choose any version ever published (not as a draft) by the Free
     Software Foundation.  If the Document specifies that a proxy can
     decide which future versions of this License can be used, that
     proxy’s public statement of acceptance of a version permanently
     authorizes you to choose that version for the Document.

  11. RELICENSING

     “Massive Multiauthor Collaboration Site” (or “MMC Site”) means any
     World Wide Web server that publishes copyrightable works and also
     provides prominent facilities for anybody to edit those works.  A
     public wiki that anybody can edit is an example of such a server.
     A “Massive Multiauthor Collaboration” (or “MMC”) contained in the
     site means any set of copyrightable works thus published on the MMC
     site.

     “CC-BY-SA” means the Creative Commons Attribution-Share Alike 3.0
     license published by Creative Commons Corporation, a not-for-profit
     corporation with a principal place of business in San Francisco,
     California, as well as future copyleft versions of that license
     published by that same organization.

     “Incorporate” means to publish or republish a Document, in whole or
     in part, as part of another Document.

     An MMC is “eligible for relicensing” if it is licensed under this
     License, and if all works that were first published under this
     License somewhere other than this MMC, and subsequently
     incorporated in whole or in part into the MMC, (1) had no cover
     texts or invariant sections, and (2) were thus incorporated prior
     to November 1, 2008.

     The operator of an MMC Site may republish an MMC contained in the
     site under CC-BY-SA on the same site at any time before August 1,
     2009, provided the MMC is eligible for relicensing.

ADDENDUM: How to use this License for your documents
====================================================

To use this License in a document you have written, include a copy of
the License in the document and put the following copyright and license
notices just after the title page:

       Copyright (C)  YEAR  YOUR NAME.
       Permission is granted to copy, distribute and/or modify this document
       under the terms of the GNU Free Documentation License, Version 1.3
       or any later version published by the Free Software Foundation;
       with no Invariant Sections, no Front-Cover Texts, and no Back-Cover
       Texts.  A copy of the license is included in the section entitled ``GNU
       Free Documentation License''.

   If you have Invariant Sections, Front-Cover Texts and Back-Cover
Texts, replace the “with...Texts.” line with this:

         with the Invariant Sections being LIST THEIR TITLES, with
         the Front-Cover Texts being LIST, and with the Back-Cover Texts
         being LIST.

   If you have Invariant Sections without Cover Texts, or some other
combination of the three, merge those two alternatives to suit the
situation.

   If your document contains nontrivial examples of program code, we
recommend releasing these examples in parallel under your choice of free
software license, such as the GNU General Public License, to permit
their use in free software.


File: doc6ndv9v.info,  Node: Indices,  Prev: GNU Free Documentation License,  Up: Top

B Indices
*********

* Menu:

* Function index::
* Variable index::
* Concept index::


File: doc6ndv9v.info,  Node: Function index,  Next: Variable index,  Up: Indices

B.1 Function index
==================

 [index ]
* Menu:

* mct-choose-completion-dwim:            Selecting candidates with mct-mode.
                                                               (line 59)
* mct-choose-completion-exit:            Selecting candidates with mct-mode.
                                                               (line 19)
* mct-choose-completion-no-exit:         Selecting candidates with mct-mode.
                                                               (line 23)
* mct-complete-and-exit:                 Selecting candidates with mct-mode.
                                                               (line 73)
* mct-edit-completion:                   Selecting candidates with mct-mode.
                                                               (line 40)
* mct-focus-minibuffer:                  Selecting candidates with mct-mode.
                                                               (line 51)
* mct-list-completions-toggle:           Cyclic behaviour for mct-mode.
                                                               (line 46)
* mct-mode:                              MCT in the minibuffer and completion in regular buffers.
                                                               (line 15)
* mct-next-completion-group:             Selecting candidates with mct-mode.
                                                               (line 79)
* mct-next-completion-or-mini:           Cyclic behaviour for mct-mode.
                                                               (line 35)
* mct-previous-completion-group:         Selecting candidates with mct-mode.
                                                               (line 79)
* mct-previous-completion-or-mini:       Cyclic behaviour for mct-mode.
                                                               (line 35)
* mct-switch-to-completions-bottom:      Cyclic behaviour for mct-mode.
                                                               (line 28)
* mct-switch-to-completions-top:         Cyclic behaviour for mct-mode.
                                                               (line 28)


File: doc6ndv9v.info,  Node: Variable index,  Next: Concept index,  Prev: Function index,  Up: Indices

B.2 Variable index
==================

 [index ]
* Menu:

* mct-completion-blocklist:              Blocklist for commands or completion categories.
                                                                (line 6)
* mct-completion-list-mode-map:          Keymaps.               (line 6)
* mct-completion-passlist:               Passlist for commands or completion categories.
                                                                (line 6)
* mct-completion-window-size:            Size boundaries of the Completions.
                                                                (line 6)
* mct-hide-completion-mode-line:         Hide the Completions mode line.
                                                                (line 6)
* mct-live-completion:                   Live completion.       (line 6)
* mct-live-update-delay:                 Delay between live updates.
                                                                (line 6)
* mct-minibuffer-local-completion-map:   Keymaps.               (line 6)
* mct-minimum-input:                     Minimum input threshold.
                                                                (line 6)
* mct-persist-dynamic-completion:        Dynamic completion tables in mct-mode.
                                                                (line 6)
* mct-remove-shadowed-file-name:         Remove shadowed file paths.
                                                                (line 6)


File: doc6ndv9v.info,  Node: Concept index,  Prev: Variable index,  Up: Indices

B.3 Concept index
=================

 [index ]
* Menu:

* Alternatives to MCT:                   Alternatives.          (line 6)
* Candidate selection for minibuffer completion: Selecting candidates with mct-mode.
                                                                (line 6)
* Contributors:                          Acknowledgements.      (line 6)
* CRM indicator:                         Indicator for completing-read-multiple.
                                                                (line 6)
* Custom tweaks or extensions:           User-level tweaks or custom code.
                                                                (line 6)
* Cyclic behaviour in the minibuffer:    Cyclic behaviour for mct-mode.
                                                                (line 6)
* Extra packages:                        Third-party extensions.
                                                                (line 6)
* Keymaps:                               Keymaps.               (line 6)
* Overview of features:                  Overview of MCT.       (line 6)
* Passlist and blocklist of commands or completion categories: Live updates per command or completion category.
                                                                (line 6)
* Persistent dynamic completion in the minibuffer: Dynamic completion tables in mct-mode.
                                                                (line 6)
* Sample configuration:                  Sample setup.          (line 6)
* Sorting completions:                   Sort completion candidates on Emacs 29.
                                                                (line 6)



Tag Table:
Node: Top848
Node: Overview of MCT4098
Node: Customizations5310
Node: Live completion5898
Node: Minimum input threshold8009
Node: Delay between live updates9242
Node: Live updates per command or completion category9929
Node: Passlist for commands or completion categories10965
Node: Blocklist for commands or completion categories12119
Node: Known completion categories13483
Node: Find completion category15381
Node: Size boundaries of the Completions16011
Node: Dynamic completion tables in mct-mode17152
Node: Hide the Completions mode line19560
Node: Remove shadowed file paths20085
Node: MCT in the minibuffer and completion in regular buffers20864
Node: Usage22828
Node: Cyclic behaviour for mct-mode23101
Node: Selecting candidates with mct-mode25172
Node: Installation30472
Node: Install the package30658
Node: Manual installation method31156
Node: Sample setup31938
Node: Keymaps35689
Node: User-level tweaks or custom code36303
Node: Sort completion candidates on Emacs 2936707
Node: Indicator for completing-read-multiple38339
Node: Ido-style navigation through directories39720
Node: Third-party extensions41102
Node: Enable Consult previews43524
Node: Alternatives43927
Node: Acknowledgements48413
Node: Official sources49396
Node: GNU Free Documentation License49782
Node: Indices75143
Node: Function index75319
Node: Variable index77560
Node: Concept index79143

End Tag Table


Local Variables:
coding: utf-8
End:
